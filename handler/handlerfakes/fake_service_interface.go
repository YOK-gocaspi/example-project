// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"example-project/handler"
	"example-project/model"
	"sync"
)

type FakeServiceInterface struct {
	CreateEmployeesStub        func([]model.Employee) (interface{}, error)
	createEmployeesMutex       sync.RWMutex
	createEmployeesArgsForCall []struct {
		arg1 []model.Employee
	}
	createEmployeesReturns struct {
		result1 interface{}
		result2 error
	}
	createEmployeesReturnsOnCall map[int]struct {
		result1 interface{}
		result2 error
	}
	DeleteEmployeesStub        func([]string) (interface{}, error)
	deleteEmployeesMutex       sync.RWMutex
	deleteEmployeesArgsForCall []struct {
		arg1 []string
	}
	deleteEmployeesReturns struct {
		result1 interface{}
		result2 error
	}
	deleteEmployeesReturnsOnCall map[int]struct {
		result1 interface{}
		result2 error
	}
	DeleteEmployeesStub        func([]string) (interface{}, error)
	deleteEmployeesMutex       sync.RWMutex
	deleteEmployeesArgsForCall []struct {
		arg1 []string
	}
	deleteEmployeesReturns struct {
		result1 interface{}
		result2 error
	}
	deleteEmployeesReturnsOnCall map[int]struct {
		result1 interface{}
		result2 error
	}
	GetAllEmployeesStub        func() []model.Employee
	getAllEmployeesMutex       sync.RWMutex
	getAllEmployeesArgsForCall []struct {
	}
	getAllEmployeesReturns struct {
		result1 []model.Employee
	}
	getAllEmployeesReturnsOnCall map[int]struct {
		result1 []model.Employee
	}
	GetEmployeeByIdStub        func(string) model.Employee
	getEmployeeByIdMutex       sync.RWMutex
	getEmployeeByIdArgsForCall []struct {
		arg1 string
	}
	getEmployeeByIdReturns struct {
		result1 model.Employee
	}
	getEmployeeByIdReturnsOnCall map[int]struct {
		result1 model.Employee
	}
	UpdateEmployeesStub        func([]model.Employee) ([]string, error)
	updateEmployeesMutex       sync.RWMutex
	updateEmployeesArgsForCall []struct {
		arg1 []model.Employee
	}
	updateEmployeesReturns struct {
		result1 []string
		result2 error
	}
	updateEmployeesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceInterface) CreateEmployees(arg1 []model.Employee) (interface{}, error) {
	var arg1Copy []model.Employee
	if arg1 != nil {
		arg1Copy = make([]model.Employee, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.createEmployeesMutex.Lock()
	ret, specificReturn := fake.createEmployeesReturnsOnCall[len(fake.createEmployeesArgsForCall)]
	fake.createEmployeesArgsForCall = append(fake.createEmployeesArgsForCall, struct {
		arg1 []model.Employee
	}{arg1Copy})
	stub := fake.CreateEmployeesStub
	fakeReturns := fake.createEmployeesReturns
	fake.recordInvocation("CreateEmployees", []interface{}{arg1Copy})
	fake.createEmployeesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) CreateEmployeesCallCount() int {
	fake.createEmployeesMutex.RLock()
	defer fake.createEmployeesMutex.RUnlock()
	return len(fake.createEmployeesArgsForCall)
}

func (fake *FakeServiceInterface) CreateEmployeesCalls(stub func([]model.Employee) (interface{}, error)) {
	fake.createEmployeesMutex.Lock()
	defer fake.createEmployeesMutex.Unlock()
	fake.CreateEmployeesStub = stub
}

func (fake *FakeServiceInterface) CreateEmployeesArgsForCall(i int) []model.Employee {
	fake.createEmployeesMutex.RLock()
	defer fake.createEmployeesMutex.RUnlock()
	argsForCall := fake.createEmployeesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceInterface) CreateEmployeesReturns(result1 interface{}, result2 error) {
	fake.createEmployeesMutex.Lock()
	defer fake.createEmployeesMutex.Unlock()
	fake.CreateEmployeesStub = nil
	fake.createEmployeesReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) CreateEmployeesReturnsOnCall(i int, result1 interface{}, result2 error) {
	fake.createEmployeesMutex.Lock()
	defer fake.createEmployeesMutex.Unlock()
	fake.CreateEmployeesStub = nil
	if fake.createEmployeesReturnsOnCall == nil {
		fake.createEmployeesReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 error
		})
	}
	fake.createEmployeesReturnsOnCall[i] = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) DeleteEmployees(arg1 []string) (interface{}, error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.deleteEmployeesMutex.Lock()
	ret, specificReturn := fake.deleteEmployeesReturnsOnCall[len(fake.deleteEmployeesArgsForCall)]
	fake.deleteEmployeesArgsForCall = append(fake.deleteEmployeesArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.DeleteEmployeesStub
	fakeReturns := fake.deleteEmployeesReturns
	fake.recordInvocation("DeleteEmployees", []interface{}{arg1Copy})
	fake.deleteEmployeesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) DeleteEmployeesCallCount() int {
	fake.deleteEmployeesMutex.RLock()
	defer fake.deleteEmployeesMutex.RUnlock()
	return len(fake.deleteEmployeesArgsForCall)
}

func (fake *FakeServiceInterface) DeleteEmployeesCalls(stub func([]string) (interface{}, error)) {
	fake.deleteEmployeesMutex.Lock()
	defer fake.deleteEmployeesMutex.Unlock()
	fake.DeleteEmployeesStub = stub
}

func (fake *FakeServiceInterface) DeleteEmployeesArgsForCall(i int) []string {
	fake.deleteEmployeesMutex.RLock()
	defer fake.deleteEmployeesMutex.RUnlock()
	argsForCall := fake.deleteEmployeesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceInterface) DeleteEmployeesReturns(result1 interface{}, result2 error) {
	fake.deleteEmployeesMutex.Lock()
	defer fake.deleteEmployeesMutex.Unlock()
	fake.DeleteEmployeesStub = nil
	fake.deleteEmployeesReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) DeleteEmployeesReturnsOnCall(i int, result1 interface{}, result2 error) {
	fake.deleteEmployeesMutex.Lock()
	defer fake.deleteEmployeesMutex.Unlock()
	fake.DeleteEmployeesStub = nil
	if fake.deleteEmployeesReturnsOnCall == nil {
		fake.deleteEmployeesReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 error
		})
	}
	fake.deleteEmployeesReturnsOnCall[i] = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) DeleteEmployees(arg1 []string) (interface{}, error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.deleteEmployeesMutex.Lock()
	ret, specificReturn := fake.deleteEmployeesReturnsOnCall[len(fake.deleteEmployeesArgsForCall)]
	fake.deleteEmployeesArgsForCall = append(fake.deleteEmployeesArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.DeleteEmployeesStub
	fakeReturns := fake.deleteEmployeesReturns
	fake.recordInvocation("DeleteEmployees", []interface{}{arg1Copy})
	fake.deleteEmployeesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) DeleteEmployeesCallCount() int {
	fake.deleteEmployeesMutex.RLock()
	defer fake.deleteEmployeesMutex.RUnlock()
	return len(fake.deleteEmployeesArgsForCall)
}

func (fake *FakeServiceInterface) DeleteEmployeesCalls(stub func([]string) (interface{}, error)) {
	fake.deleteEmployeesMutex.Lock()
	defer fake.deleteEmployeesMutex.Unlock()
	fake.DeleteEmployeesStub = stub
}

func (fake *FakeServiceInterface) DeleteEmployeesArgsForCall(i int) []string {
	fake.deleteEmployeesMutex.RLock()
	defer fake.deleteEmployeesMutex.RUnlock()
	argsForCall := fake.deleteEmployeesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceInterface) DeleteEmployeesReturns(result1 interface{}, result2 error) {
	fake.deleteEmployeesMutex.Lock()
	defer fake.deleteEmployeesMutex.Unlock()
	fake.DeleteEmployeesStub = nil
	fake.deleteEmployeesReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) DeleteEmployeesReturnsOnCall(i int, result1 interface{}, result2 error) {
	fake.deleteEmployeesMutex.Lock()
	defer fake.deleteEmployeesMutex.Unlock()
	fake.DeleteEmployeesStub = nil
	if fake.deleteEmployeesReturnsOnCall == nil {
		fake.deleteEmployeesReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 error
		})
	}
	fake.deleteEmployeesReturnsOnCall[i] = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) GetAllEmployees() []model.Employee {
	fake.getAllEmployeesMutex.Lock()
	ret, specificReturn := fake.getAllEmployeesReturnsOnCall[len(fake.getAllEmployeesArgsForCall)]
	fake.getAllEmployeesArgsForCall = append(fake.getAllEmployeesArgsForCall, struct {
	}{})
	stub := fake.GetAllEmployeesStub
	fakeReturns := fake.getAllEmployeesReturns
	fake.recordInvocation("GetAllEmployees", []interface{}{})
	fake.getAllEmployeesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceInterface) GetAllEmployeesCallCount() int {
	fake.getAllEmployeesMutex.RLock()
	defer fake.getAllEmployeesMutex.RUnlock()
	return len(fake.getAllEmployeesArgsForCall)
}

func (fake *FakeServiceInterface) GetAllEmployeesCalls(stub func() []model.Employee) {
	fake.getAllEmployeesMutex.Lock()
	defer fake.getAllEmployeesMutex.Unlock()
	fake.GetAllEmployeesStub = stub
}

func (fake *FakeServiceInterface) GetAllEmployeesReturns(result1 []model.Employee) {
	fake.getAllEmployeesMutex.Lock()
	defer fake.getAllEmployeesMutex.Unlock()
	fake.GetAllEmployeesStub = nil
	fake.getAllEmployeesReturns = struct {
		result1 []model.Employee
	}{result1}
}

func (fake *FakeServiceInterface) GetAllEmployeesReturnsOnCall(i int, result1 []model.Employee) {
	fake.getAllEmployeesMutex.Lock()
	defer fake.getAllEmployeesMutex.Unlock()
	fake.GetAllEmployeesStub = nil
	if fake.getAllEmployeesReturnsOnCall == nil {
		fake.getAllEmployeesReturnsOnCall = make(map[int]struct {
			result1 []model.Employee
		})
	}
	fake.getAllEmployeesReturnsOnCall[i] = struct {
		result1 []model.Employee
	}{result1}
}

func (fake *FakeServiceInterface) GetEmployeeById(arg1 string) model.Employee {
	fake.getEmployeeByIdMutex.Lock()
	ret, specificReturn := fake.getEmployeeByIdReturnsOnCall[len(fake.getEmployeeByIdArgsForCall)]
	fake.getEmployeeByIdArgsForCall = append(fake.getEmployeeByIdArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetEmployeeByIdStub
	fakeReturns := fake.getEmployeeByIdReturns
	fake.recordInvocation("GetEmployeeById", []interface{}{arg1})
	fake.getEmployeeByIdMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceInterface) GetEmployeeByIdCallCount() int {
	fake.getEmployeeByIdMutex.RLock()
	defer fake.getEmployeeByIdMutex.RUnlock()
	return len(fake.getEmployeeByIdArgsForCall)
}

func (fake *FakeServiceInterface) GetEmployeeByIdCalls(stub func(string) model.Employee) {
	fake.getEmployeeByIdMutex.Lock()
	defer fake.getEmployeeByIdMutex.Unlock()
	fake.GetEmployeeByIdStub = stub
}

func (fake *FakeServiceInterface) GetEmployeeByIdArgsForCall(i int) string {
	fake.getEmployeeByIdMutex.RLock()
	defer fake.getEmployeeByIdMutex.RUnlock()
	argsForCall := fake.getEmployeeByIdArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceInterface) GetEmployeeByIdReturns(result1 model.Employee) {
	fake.getEmployeeByIdMutex.Lock()
	defer fake.getEmployeeByIdMutex.Unlock()
	fake.GetEmployeeByIdStub = nil
	fake.getEmployeeByIdReturns = struct {
		result1 model.Employee
	}{result1}
}

func (fake *FakeServiceInterface) GetEmployeeByIdReturnsOnCall(i int, result1 model.Employee) {
	fake.getEmployeeByIdMutex.Lock()
	defer fake.getEmployeeByIdMutex.Unlock()
	fake.GetEmployeeByIdStub = nil
	if fake.getEmployeeByIdReturnsOnCall == nil {
		fake.getEmployeeByIdReturnsOnCall = make(map[int]struct {
			result1 model.Employee
		})
	}
	fake.getEmployeeByIdReturnsOnCall[i] = struct {
		result1 model.Employee
	}{result1}
}

func (fake *FakeServiceInterface) UpdateEmployees(arg1 []model.Employee) ([]string, error) {
	var arg1Copy []model.Employee
	if arg1 != nil {
		arg1Copy = make([]model.Employee, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.updateEmployeesMutex.Lock()
	ret, specificReturn := fake.updateEmployeesReturnsOnCall[len(fake.updateEmployeesArgsForCall)]
	fake.updateEmployeesArgsForCall = append(fake.updateEmployeesArgsForCall, struct {
		arg1 []model.Employee
	}{arg1Copy})
	stub := fake.UpdateEmployeesStub
	fakeReturns := fake.updateEmployeesReturns
	fake.recordInvocation("UpdateEmployees", []interface{}{arg1Copy})
	fake.updateEmployeesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) UpdateEmployeesCallCount() int {
	fake.updateEmployeesMutex.RLock()
	defer fake.updateEmployeesMutex.RUnlock()
	return len(fake.updateEmployeesArgsForCall)
}

func (fake *FakeServiceInterface) UpdateEmployeesCalls(stub func([]model.Employee) ([]string, error)) {
	fake.updateEmployeesMutex.Lock()
	defer fake.updateEmployeesMutex.Unlock()
	fake.UpdateEmployeesStub = stub
}

func (fake *FakeServiceInterface) UpdateEmployeesArgsForCall(i int) []model.Employee {
	fake.updateEmployeesMutex.RLock()
	defer fake.updateEmployeesMutex.RUnlock()
	argsForCall := fake.updateEmployeesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceInterface) UpdateEmployeesReturns(result1 []string, result2 error) {
	fake.updateEmployeesMutex.Lock()
	defer fake.updateEmployeesMutex.Unlock()
	fake.UpdateEmployeesStub = nil
	fake.updateEmployeesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) UpdateEmployeesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.updateEmployeesMutex.Lock()
	defer fake.updateEmployeesMutex.Unlock()
	fake.UpdateEmployeesStub = nil
	if fake.updateEmployeesReturnsOnCall == nil {
		fake.updateEmployeesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.updateEmployeesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createEmployeesMutex.RLock()
	defer fake.createEmployeesMutex.RUnlock()
	fake.deleteEmployeesMutex.RLock()
	defer fake.deleteEmployeesMutex.RUnlock()
	fake.getAllEmployeesMutex.RLock()
	defer fake.getAllEmployeesMutex.RUnlock()
	fake.getEmployeeByIdMutex.RLock()
	defer fake.getEmployeeByIdMutex.RUnlock()
	fake.updateEmployeesMutex.RLock()
	defer fake.updateEmployeesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.ServiceInterface = new(FakeServiceInterface)
